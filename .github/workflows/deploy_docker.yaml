name: Docker image

on:
  release:
    types: [published]
  push:
    branches:
      - dev-docker

env:
  IMAGE_NAME: prise6/mediastrends

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      - name: Build python package
        run: |
          python setup.py sdist bdist_wheel
      - name: Upload python wheel 
        uses: actions/upload-artifact@v2
        with:
          name: mediastrends_wheel
          path: dist/*.whl

  docker-deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Create dist directory
        run: |
          mkdir dist
      - name: Download python wheel package
        uses: actions/download-artifact@v2
        with:
          name: mediastrends_wheel
          path: dist
      - name: Build docker image
        if: github.event_name == 'release'
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: prise6/medias-trends/mediastrends-core
          tag_with_ref: True
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@master
        with:
          buildx-version: latest
      - name: Login dockerhub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build docker image with buildx
        run: |

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo $IMAGE_NAME:$VERSION

          docker buildx build \
            --platform linux/amd64,linux/arm/v7 \
            --push \
            --tag $IMAGE_NAME:$VERSION \
            --file Dockerfile .
      - name: Clear
        run: |
          rm -f ${HOME}/.docker/config.json

